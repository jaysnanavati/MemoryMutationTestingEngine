        -:    0:Source:raft_node.c
        -:    0:Programs:4
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <assert.h>
        -:    5:#include "raft.h"
        -:    6:typedef struct {
        -:    7:    void * udata;
        -:    8:    int next_idx;
        -:    9:} raft_node_private_t;
        -:   10:
function raft_node_new called 80 returned 100% blocks executed 100%
       80:   11:raft_node_t * raft_node_new (void * udata) {
        -:   12:    raft_node_private_t * me;
       80:   13:    me = calloc ((1) + 1, sizeof (raft_node_private_t));
       80:   14:    me->udata = udata;
       80:   15:    return (void *) me;
        -:   16:}
        -:   17:
function raft_node_is_leader called 0 returned 0% blocks executed 0%
    #####:   18:int raft_node_is_leader (raft_node_t * me_) {
    #####:   19:    return 0;
        -:   20:}
        -:   21:
function raft_node_get_next_idx called 32 returned 100% blocks executed 100%
       32:   22:int raft_node_get_next_idx (raft_node_t * me_) {
       32:   23:    raft_node_private_t * me = (void *) me_;
       32:   24:    return me->next_idx;
        -:   25:}
        -:   26:
function raft_node_set_next_idx called 16 returned 100% blocks executed 100%
       16:   27:void raft_node_set_next_idx (raft_node_t * me_, int nextIdx) {
       16:   28:    raft_node_private_t * me = (void *) me_;
       16:   29:    me->next_idx = nextIdx;
       16:   30:}
        -:   31:
function raft_node_get_udata called 0 returned 0% blocks executed 0%
    #####:   32:void * raft_node_get_udata (raft_node_t * me_) {
    #####:   33:    raft_node_private_t * me = (void *) me_;
    #####:   34:    return me->udata;
        -:   35:}
        -:   36:
