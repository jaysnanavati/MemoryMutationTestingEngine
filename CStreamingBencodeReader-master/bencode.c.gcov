        -:    0:Source:bencode.c
        -:    0:Programs:2
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <string.h>
        -:    6:#include <ctype.h>
        -:    7:#include <math.h>
        -:    8:#include "bencode.h"
        -:    9:
function bencode_new called 28 returned 100% blocks executed 100%
       28:   10:bencode_t * bencode_new (int expected_depth, bencode_callbacks_t * cb, void * udata) {
        -:   11:    bencode_t * me;
       28:   12:    me = calloc (1, sizeof (bencode_t));
       28:   13:    bencode_set_callbacks (me, cb);
call    0 returned 28
       28:   14:    me->udata = udata;
       28:   15:    me->nframes = expected_depth;
       28:   16:    me->stk = calloc (10 + expected_depth, sizeof (bencode_frame_t));
       28:   17:    return me;
        -:   18:}
        -:   19:
function bencode_init called 0 returned 0% blocks executed 0%
    #####:   20:void bencode_init (bencode_t * me) {
    #####:   21:    memset (me, 0, sizeof (bencode_t));
    #####:   22:}
        -:   23:
function __push_stack called 38 returned 100% blocks executed 88%
       38:   24:static bencode_frame_t * __push_stack (bencode_t * me) {
       38:   25:    if (me->nframes <= me->d) {
branch  0 taken 0 (fallthrough)
branch  1 taken 38
    #####:   26:        assert (0);
call    0 never executed
        -:   27:        return NULL;
        -:   28:    }
       38:   29:    me->d++;
       38:   30:    bencode_frame_t * s = &me->stk[me->d];
       38:   31:    s->pos = 0;
       38:   32:    s->intval = 0;
       38:   33:    s->len = 0;
       38:   34:    s->type = 0;
       38:   35:    if (0 == s->sv_size) {
branch  0 taken 23 (fallthrough)
branch  1 taken 15
       23:   36:        s->sv_size = 20;
       23:   37:        s->strval = malloc (s->sv_size);
        -:   38:    }
       38:   39:    if (0 == s->k_size) {
branch  0 taken 23 (fallthrough)
branch  1 taken 15
       23:   40:        s->k_size = 20;
       23:   41:        s->key = malloc ((s->k_size) + 1);
        -:   42:    }
       38:   43:    return &me->stk[me->d];
        -:   44:}
        -:   45:
function __pop_stack called 61 returned 100% blocks executed 100%
       61:   46:static bencode_frame_t * __pop_stack (bencode_t * me) {
        -:   47:    bencode_frame_t * f;
       61:   48:    f = &me->stk[me->d];
       61:   49:    switch (f->type) {
branch  0 taken 17
branch  1 taken 8
branch  2 taken 36
        -:   50:    case BENCODE_TOK_LIST :
       17:   51:        if (me->cb.list_leave)
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17:   52:            me->cb.list_leave (me, f->key);
call    0 returned 17
       17:   53:        break;
        -:   54:    case BENCODE_TOK_DICT :
        8:   55:        if (me->cb.dict_leave)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:   56:            me->cb.dict_leave (me, f->key);
call    0 returned 8
        8:   57:        break;
        -:   58:    }
       61:   59:    if (me->d == 0)
branch  0 taken 24 (fallthrough)
branch  1 taken 37
       24:   60:        return NULL;
       37:   61:    f = &me->stk[--me->d];
       37:   62:    switch (f->type) {
branch  0 taken 22
branch  1 taken 15
branch  2 taken 0
        -:   63:    case BENCODE_TOK_LIST :
       22:   64:        if (me->cb.list_next)
branch  0 taken 22 (fallthrough)
branch  1 taken 0
       22:   65:            me->cb.list_next (me);
call    0 returned 22
       22:   66:        break;
        -:   67:    case BENCODE_TOK_DICT :
       15:   68:        if (me->cb.dict_next)
branch  0 taken 15 (fallthrough)
branch  1 taken 0
       15:   69:            me->cb.dict_next (me);
call    0 returned 15
       15:   70:        break;
        -:   71:    }
       37:   72:    return f;
        -:   73:}
        -:   74:
function __parse_digit called 74 returned 100% blocks executed 100%
       74:   75:static int __parse_digit (const int current_value, const char c) {
       74:   76:    return (c - '0') + current_value * 10;
        -:   77:}
        -:   78:
function __start_int called 6 returned 100% blocks executed 100%
        6:   79:static void __start_int (bencode_frame_t * f) {
        6:   80:    f->type = BENCODE_TOK_INT;
        6:   81:    f->pos = 0;
        6:   82:}
        -:   83:
function __start_dict called 10 returned 100% blocks executed 100%
       10:   84:static bencode_frame_t * __start_dict (bencode_t * me, bencode_frame_t * f) {
       10:   85:    f->type = BENCODE_TOK_DICT;
       10:   86:    f->pos = 0;
       10:   87:    if (me->cb.dict_enter)
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:   88:        me->cb.dict_enter (me, f->key);
call    0 returned 10
       10:   89:    f = __push_stack (me);
call    0 returned 10
       10:   90:    f->type = BENCODE_TOK_DICT_KEYLEN;
       10:   91:    return f;
        -:   92:}
        -:   93:
function __start_list called 17 returned 100% blocks executed 100%
       17:   94:static void __start_list (bencode_t * me, bencode_frame_t * f) {
       17:   95:    f->type = BENCODE_TOK_LIST;
       17:   96:    f->pos = 0;
       17:   97:    if (me->cb.list_enter)
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17:   98:        me->cb.list_enter (me, f->key);
call    0 returned 17
       17:   99:}
        -:  100:
function __start_str called 29 returned 100% blocks executed 100%
       29:  101:static void __start_str (bencode_frame_t * f) {
       29:  102:    f->type = BENCODE_TOK_STR_LEN;
       29:  103:    f->pos = 0;
       29:  104:}
        -:  105:
function __process_tok called 355 returned 100% blocks executed 86%
      355:  106:static int __process_tok (bencode_t * me, const char * * buf, unsigned int * len) {
      355:  107:    bencode_frame_t * f = &me->stk[me->d];
      355:  108:    switch (f->type) {
branch  0 taken 39
branch  1 taken 42
branch  2 taken 34
branch  3 taken 31
branch  4 taken 116
branch  5 taken 14
branch  6 taken 25
branch  7 taken 54
branch  8 taken 0
        -:  109:    case BENCODE_TOK_LIST :
       39:  110:        switch (**buf) {
branch  0 taken 17
branch  1 taken 0
branch  2 taken 0
branch  3 taken 4
branch  4 taken 18
        -:  111:        case 'e' :
       17:  112:            f = __pop_stack (me);
call    0 returned 17
       17:  113:            break;
        -:  114:        case 'i' :
    #####:  115:            f = __push_stack (me);
call    0 never executed
    #####:  116:            __start_int (f);
call    0 never executed
    #####:  117:            break;
        -:  118:        case 'd' :
    #####:  119:            f = __push_stack (me);
call    0 never executed
    #####:  120:            f = __start_dict (me, f);
call    0 never executed
    #####:  121:            break;
        -:  122:        case 'l' :
        4:  123:            f = __push_stack (me);
call    0 returned 4
        4:  124:            __start_list (me, f);
call    0 returned 4
        4:  125:            break;
        -:  126:        default :
       18:  127:            if (isdigit (**buf)) {
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0
       18:  128:                f = __push_stack (me);
call    0 returned 18
       18:  129:                __start_str (f);
call    0 returned 18
       18:  130:                f->len = __parse_digit (f->len, **buf);
call    0 returned 18
        -:  131:            }
        -:  132:            else {
    #####:  133:                return 0;
        -:  134:            }
       18:  135:            break;
        -:  136:        }
       39:  137:        break;
        -:  138:    case BENCODE_TOK_DICT_VAL :
        -:  139:    case BENCODE_TOK_NONE :
       42:  140:        switch (**buf) {
branch  0 taken 6
branch  1 taken 10
branch  2 taken 13
branch  3 taken 13
        -:  141:        case 'i' :
        6:  142:            __start_int (f);
call    0 returned 6
        6:  143:            break;
        -:  144:        case 'd' :
       10:  145:            f = __start_dict (me, f);
call    0 returned 10
       10:  146:            break;
        -:  147:        case 'l' :
       13:  148:            __start_list (me, f);
call    0 returned 13
       13:  149:            break;
        -:  150:        default :
       13:  151:            if (isdigit (**buf)) {
call    0 returned 13
branch  1 taken 11 (fallthrough)
branch  2 taken 2
       11:  152:                __start_str (f);
call    0 returned 11
       11:  153:                f->len = __parse_digit (f->len, **buf);
call    0 returned 11
        -:  154:            }
        -:  155:            else {
        2:  156:                return 0;
        -:  157:            }
       11:  158:            break;
        -:  159:        }
       40:  160:        break;
        -:  161:    case BENCODE_TOK_INT :
       34:  162:        if ('e' == **buf) {
branch  0 taken 6 (fallthrough)
branch  1 taken 28
        6:  163:            me->cb.hit_int (me, f->key, f->intval);
call    0 returned 6
        6:  164:            f = __pop_stack (me);
call    0 returned 6
        -:  165:        }
       28:  166:        else if (isdigit (**buf)) {
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0
       28:  167:            f->intval = __parse_digit (f->intval, **buf);
call    0 returned 28
        -:  168:        }
        -:  169:        else {
    #####:  170:            assert (0);
call    0 never executed
        -:  171:        }
       34:  172:        break;
        -:  173:    case BENCODE_TOK_STR_LEN :
       31:  174:        if (':' == **buf) {
branch  0 taken 29 (fallthrough)
branch  1 taken 2
       29:  175:            if (0 == f->len) {
branch  0 taken 1 (fallthrough)
branch  1 taken 28
        1:  176:                me->cb.hit_str (me, f->key, 0, NULL, 0);
call    0 returned 1
        1:  177:                f = __pop_stack (me);
call    0 returned 1
        -:  178:            }
        -:  179:            else {
       28:  180:                f->type = BENCODE_TOK_STR;
       28:  181:                f->pos = 0;
        -:  182:            }
        -:  183:        }
        2:  184:        else if (isdigit (**buf)) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  185:            f->len = __parse_digit (f->len, **buf);
call    0 returned 2
        -:  186:        }
        -:  187:        else {
    #####:  188:            assert (0);
call    0 never executed
        -:  189:        }
       31:  190:        break;
        -:  191:    case BENCODE_TOK_STR :
      116:  192:        if (f->sv_size <= f->pos + 1) {
branch  0 taken 10 (fallthrough)
branch  1 taken 106
       10:  193:            f->sv_size = 4 + f->sv_size * 2;
       10:  194:            f->strval = realloc (f->strval, f->sv_size);
        -:  195:        }
      116:  196:        f->strval[f->pos++] = **buf;
      116:  197:        if (f->len == f->pos) {
branch  0 taken 28 (fallthrough)
branch  1 taken 88
       28:  198:            f->strval[f->pos] = 0;
       28:  199:            me->cb.hit_str (me, f->key, f->len, (const unsigned char *) f->strval, f->len);
call    0 returned 28
       28:  200:            f = __pop_stack (me);
call    0 returned 28
        -:  201:        }
      116:  202:        break;
        -:  203:    case BENCODE_TOK_DICT :
       14:  204:        if ('e' == **buf) {
branch  0 taken 8 (fallthrough)
branch  1 taken 6
        8:  205:            f = __pop_stack (me);
call    0 returned 8
        8:  206:            goto done;
        -:  207:        }
        6:  208:        f = __push_stack (me);
call    0 returned 6
        6:  209:        f->type = BENCODE_TOK_DICT_KEYLEN;
        6:  210:        f->pos = 0;
        -:  211:    case BENCODE_TOK_DICT_KEYLEN :
       31:  212:        if (':' == **buf) {
branch  0 taken 15 (fallthrough)
branch  1 taken 16
       15:  213:            f->type = BENCODE_TOK_DICT_KEY;
       15:  214:            f->pos = 0;
        -:  215:        }
       16:  216:        else if (isdigit (**buf)) {
call    0 returned 16
branch  1 taken 15 (fallthrough)
branch  2 taken 1
       15:  217:            f->len = __parse_digit (f->len, **buf);
call    0 returned 15
        -:  218:        }
        1:  219:        else if ('e' == **buf) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  220:            f = __pop_stack (me);
call    0 returned 1
        -:  221:        }
        -:  222:        else {
    #####:  223:            return 0;
        -:  224:        }
       31:  225:        break;
        -:  226:    case BENCODE_TOK_DICT_KEY :
       54:  227:        if (f->k_size <= f->pos + 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 54
    #####:  228:            f->k_size = f->k_size * 2 + 4;
    #####:  229:            f->key = realloc (f->key, f->k_size);
        -:  230:        }
       54:  231:        f->key[f->pos++] = **buf;
       54:  232:        if (f->pos == f->len) {
branch  0 taken 15 (fallthrough)
branch  1 taken 39
       15:  233:            f->key[f->pos] = '\0';
       15:  234:            f->type = BENCODE_TOK_DICT_VAL;
       15:  235:            f->pos = 0;
       15:  236:            f->len = 0;
        -:  237:        }
       54:  238:        break;
        -:  239:    default :
    #####:  240:        assert (0);
call    0 never executed
        -:  241:        break;
        -:  242:    }
        -:  243:done :
      353:  244:    (*buf)++;
      353:  245:    *len -= 1;
      353:  246:    return 1;
        -:  247:}
        -:  248:
function bencode_dispatch_from_buffer called 28 returned 100% blocks executed 100%
       28:  249:int bencode_dispatch_from_buffer (bencode_t * me, const char * buf, unsigned int len) {
       28:  250:    if (me->nframes <= me->d)
branch  0 taken 1 (fallthrough)
branch  1 taken 27
        1:  251:        return 0;
      407:  252:    while (0 < len) {
branch  0 taken 355
branch  1 taken 25 (fallthrough)
      355:  253:        switch (__process_tok (me, &buf, &len)) {
call    0 returned 355
branch  1 taken 2
branch  2 taken 353
        -:  254:        case 0 :
        2:  255:            return 0;
        -:  256:            break;
        -:  257:        }
        -:  258:    }
       25:  259:    return 1;
        -:  260:}
        -:  261:
function bencode_set_callbacks called 28 returned 100% blocks executed 100%
       28:  262:void bencode_set_callbacks (bencode_t * me, bencode_callbacks_t * cb) {
       28:  263:    memcpy (& me -> cb, cb, sizeof (bencode_callbacks_t));
       28:  264:}
        -:  265:
