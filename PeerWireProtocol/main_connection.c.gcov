        -:    0:Source:main_connection.c
        -:    0:Programs:2
        -:    1:
        -:    2:
        -:    3:/* This is auto-generated code. Edit at your own peril. */
        -:    4:#include <stdio.h>
        -:    5:#include "CuTest.h"
        -:    6:
        -:    7:
        -:    8:extern void TestPWP_init_has_us_choked(CuTest*);
        -:    9:extern void TestPWP_init_not_interested(CuTest*);
        -:   10:extern void TestPWP_choke_sets_as_choked(CuTest*);
        -:   11:extern void TestPWP_unchoke_sets_as_unchoked(CuTest*);
        -:   12:extern void TestPWP_unchoke_setget_flag(CuTest*);
        -:   13:extern void TestPWP_send_state_change_is_wellformed(CuTest*);
        -:   14:extern void TestPWP_send_have_is_wellformed(CuTest*);
        -:   15:extern void TestPWP_send_bitField_is_wellformed(CuTest*);
        -:   16:extern void TestPWP_send_request_is_wellformed(CuTest*);
        -:   17:extern void TestPWP_send_piece_is_wellformed(CuTest*);
        -:   18:extern void TestPWP_send_cancel_is_wellformed(CuTest*);
        -:   19:extern void TestPWP_read_havemsg_marks_peer_as_having_piece(CuTest*);
        -:   20:extern void TestPWP_read_havemsg_disconnects_with_piece_idx_out_of_bounds(CuTest*);
        -:   21:extern void TestPWP_send_interested_if_lacking_piece_from_have_msg(CuTest*);
        -:   22:extern void TestPWP_read_chokemsg_marks_us_as_choked(CuTest*);
        -:   23:extern void TestPWP_read_chokemsg_empties_our_pending_requests(CuTest*);
        -:   24:extern void TestPWP_read_unchokemsg_marks_us_as_unchoked(CuTest*);
        -:   25:extern void TestPWP_read_request_msg_disconnects_if_peer_is_choked(CuTest*);
        -:   26:extern void TestPWP_read_peerisinterested_marks_peer_as_interested(CuTest*);
        -:   27:extern void TestPWP_read_peerisuninterested_marks_peer_as_uninterested(CuTest*);
        -:   28:extern void TestPWP_read_bitfield_marks_peers_pieces_as_haved_by_peer(CuTest*);
        -:   29:extern void TestPWP_read_disconnect_if_bitfield_received_more_than_once(CuTest*);
        -:   30:extern void TestPWP_read_request_of_piece_not_completed_disconnects_peer(CuTest*);
        -:   31:extern void TestPWP_read_request_with_invalid_piece_idx_disconnects_peer(CuTest*);
        -:   32:extern void TestPWP_read_request_with_invalid_block_length_disconnects_peer(CuTest*);
        -:   33:extern void TestPWP_read_request_of_piece_which_client_has_results_in_disconnect(CuTest*);
        -:   34:extern void TestPWP_read_piece_results_in_correct_receivable(CuTest*);
        -:   35:extern void TestPWP_send_request_is_wellformed_even_when_request_len_was_outside_piece_len(CuTest*);
        -:   36:extern void TestPWP_read_request_doesnt_duplicate_within_pending_queue(CuTest*);
        -:   37:extern void TestPWP_requesting_block_increments_pending_requests(CuTest*);
        -:   38:extern void TestPWP_read_piece_decreases_pending_requests(CuTest*);
        -:   39:extern void TestPWP_read_piece_decreases_pending_requests_only_if_it_matches_a_request_rightside(CuTest*);
        -:   40:extern void TestPWP_read_piece_decreases_pending_requests_only_if_it_matches_a_request_leftside(CuTest*);
        -:   41:extern void TestPWP_read_piece_decreases_pending_requests_if_piece_covers_whole_request(CuTest*);
        -:   42:extern void TestPWP_read_piece_increases_pending_requests_if_piece_splits_requested(CuTest*);
        -:   43:extern void TestPWP_read_cancelmsg_cancels_last_request(CuTest*);
        -:   44:extern void TestPWP_request_queue_dropped_when_peer_is_choked(CuTest*);
        -:   45:
        -:   46:
function RunAllTests called 1 returned 100% blocks executed 100%
        1:   47:void RunAllTests(void) 
        -:   48:{
        1:   49:    CuString *output = CuStringNew();
call    0 returned 1
        1:   50:    CuSuite* suite = CuSuiteNew();
call    0 returned 1
        -:   51:
        -:   52:
        1:   53:    SUITE_ADD_TEST(suite, TestPWP_init_has_us_choked);
call    0 returned 1
call    1 returned 1
        1:   54:    SUITE_ADD_TEST(suite, TestPWP_init_not_interested);
call    0 returned 1
call    1 returned 1
        1:   55:    SUITE_ADD_TEST(suite, TestPWP_choke_sets_as_choked);
call    0 returned 1
call    1 returned 1
        1:   56:    SUITE_ADD_TEST(suite, TestPWP_unchoke_sets_as_unchoked);
call    0 returned 1
call    1 returned 1
        1:   57:    SUITE_ADD_TEST(suite, TestPWP_unchoke_setget_flag);
call    0 returned 1
call    1 returned 1
        1:   58:    SUITE_ADD_TEST(suite, TestPWP_send_state_change_is_wellformed);
call    0 returned 1
call    1 returned 1
        1:   59:    SUITE_ADD_TEST(suite, TestPWP_send_have_is_wellformed);
call    0 returned 1
call    1 returned 1
        1:   60:    SUITE_ADD_TEST(suite, TestPWP_send_bitField_is_wellformed);
call    0 returned 1
call    1 returned 1
        1:   61:    SUITE_ADD_TEST(suite, TestPWP_send_request_is_wellformed);
call    0 returned 1
call    1 returned 1
        1:   62:    SUITE_ADD_TEST(suite, TestPWP_send_piece_is_wellformed);
call    0 returned 1
call    1 returned 1
        1:   63:    SUITE_ADD_TEST(suite, TestPWP_send_cancel_is_wellformed);
call    0 returned 1
call    1 returned 1
        1:   64:    SUITE_ADD_TEST(suite, TestPWP_read_havemsg_marks_peer_as_having_piece);
call    0 returned 1
call    1 returned 1
        1:   65:    SUITE_ADD_TEST(suite, TestPWP_read_havemsg_disconnects_with_piece_idx_out_of_bounds);
call    0 returned 1
call    1 returned 1
        1:   66:    SUITE_ADD_TEST(suite, TestPWP_send_interested_if_lacking_piece_from_have_msg);
call    0 returned 1
call    1 returned 1
        1:   67:    SUITE_ADD_TEST(suite, TestPWP_read_chokemsg_marks_us_as_choked);
call    0 returned 1
call    1 returned 1
        1:   68:    SUITE_ADD_TEST(suite, TestPWP_read_chokemsg_empties_our_pending_requests);
call    0 returned 1
call    1 returned 1
        1:   69:    SUITE_ADD_TEST(suite, TestPWP_read_unchokemsg_marks_us_as_unchoked);
call    0 returned 1
call    1 returned 1
        1:   70:    SUITE_ADD_TEST(suite, TestPWP_read_request_msg_disconnects_if_peer_is_choked);
call    0 returned 1
call    1 returned 1
        1:   71:    SUITE_ADD_TEST(suite, TestPWP_read_peerisinterested_marks_peer_as_interested);
call    0 returned 1
call    1 returned 1
        1:   72:    SUITE_ADD_TEST(suite, TestPWP_read_peerisuninterested_marks_peer_as_uninterested);
call    0 returned 1
call    1 returned 1
        1:   73:    SUITE_ADD_TEST(suite, TestPWP_read_bitfield_marks_peers_pieces_as_haved_by_peer);
call    0 returned 1
call    1 returned 1
        1:   74:    SUITE_ADD_TEST(suite, TestPWP_read_disconnect_if_bitfield_received_more_than_once);
call    0 returned 1
call    1 returned 1
        1:   75:    SUITE_ADD_TEST(suite, TestPWP_read_request_of_piece_not_completed_disconnects_peer);
call    0 returned 1
call    1 returned 1
        1:   76:    SUITE_ADD_TEST(suite, TestPWP_read_request_with_invalid_piece_idx_disconnects_peer);
call    0 returned 1
call    1 returned 1
        1:   77:    SUITE_ADD_TEST(suite, TestPWP_read_request_with_invalid_block_length_disconnects_peer);
call    0 returned 1
call    1 returned 1
        1:   78:    SUITE_ADD_TEST(suite, TestPWP_read_request_of_piece_which_client_has_results_in_disconnect);
call    0 returned 1
call    1 returned 1
        1:   79:    SUITE_ADD_TEST(suite, TestPWP_read_piece_results_in_correct_receivable);
call    0 returned 1
call    1 returned 1
        1:   80:    SUITE_ADD_TEST(suite, TestPWP_send_request_is_wellformed_even_when_request_len_was_outside_piece_len);
call    0 returned 1
call    1 returned 1
        1:   81:    SUITE_ADD_TEST(suite, TestPWP_read_request_doesnt_duplicate_within_pending_queue);
call    0 returned 1
call    1 returned 1
        1:   82:    SUITE_ADD_TEST(suite, TestPWP_requesting_block_increments_pending_requests);
call    0 returned 1
call    1 returned 1
        1:   83:    SUITE_ADD_TEST(suite, TestPWP_read_piece_decreases_pending_requests);
call    0 returned 1
call    1 returned 1
        1:   84:    SUITE_ADD_TEST(suite, TestPWP_read_piece_decreases_pending_requests_only_if_it_matches_a_request_rightside);
call    0 returned 1
call    1 returned 1
        1:   85:    SUITE_ADD_TEST(suite, TestPWP_read_piece_decreases_pending_requests_only_if_it_matches_a_request_leftside);
call    0 returned 1
call    1 returned 1
        1:   86:    SUITE_ADD_TEST(suite, TestPWP_read_piece_decreases_pending_requests_if_piece_covers_whole_request);
call    0 returned 1
call    1 returned 1
        1:   87:    SUITE_ADD_TEST(suite, TestPWP_read_piece_increases_pending_requests_if_piece_splits_requested);
call    0 returned 1
call    1 returned 1
        1:   88:    SUITE_ADD_TEST(suite, TestPWP_read_cancelmsg_cancels_last_request);
call    0 returned 1
call    1 returned 1
        1:   89:    SUITE_ADD_TEST(suite, TestPWP_request_queue_dropped_when_peer_is_choked);
call    0 returned 1
call    1 returned 1
        -:   90:
        1:   91:    CuSuiteRun(suite);
call    0 returned 1
        1:   92:    CuSuiteSummary(suite, output);
call    0 returned 1
        1:   93:    CuSuiteDetails(suite, output);
call    0 returned 1
        1:   94:    printf("%s\n", output->buffer);
call    0 returned 1
        1:   95:}
        -:   96:
function main called 1 returned 100% blocks executed 100%
        1:   97:int main()
        -:   98:{
        1:   99:    RunAllTests();
call    0 returned 1
        1:  100:    return 0;
        -:  101:}
        -:  102:
